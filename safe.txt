from web3 import Web3
from solcx import compile_standard, set_solc_version
import json

# Install Solidity compiler version
set_solc_version('0.8.0')

# Read smart contract
with open("TransactionStorage.sol", "r") as file:
    contract_source_code = file.read()

compiled_sol = compile_standard({
    "language": "Solidity",
    "sources": {"TransactionStorage.sol": {"content": contract_source_code}},
    "settings": {"outputSelection": {"*": {"*": ["abi", "evm.bytecode"]}}}
})

# Extract ABI and bytecode
abi = compiled_sol['contracts']['TransactionStorage.sol']['TransactionStorage']['abi']
bytecode = compiled_sol['contracts']['TransactionStorage.sol']['TransactionStorage']['evm']['bytecode']['object']

# Connect to Ganache
w3 = Web3(Web3.HTTPProvider("http://127.0.0.1:7545"))
chain_id = 1337  # Ganache default
my_address = w3.eth.accounts[0]
private_key = "0xa430aba0a620cb4aba1f777c51049353e5377e429c04937dd0e691cbd56313bf"  # Replace with one account private key from Ganache

# Deploy contract
Transaction = w3.eth.contract(abi=abi, bytecode=bytecode)
nonce = w3.eth.get_transaction_count(my_address)

tx = Transaction.constructor().build_transaction({
    "chainId": chain_id,
    "from": my_address,
    "nonce": nonce,
    "gas": 3000000,
    "gasPrice": w3.to_wei('20', 'gwei')
})

signed_tx = w3.eth.account.sign_transaction(tx, private_key=private_key)
tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

print("Contract deployed at:", tx_receipt.contractAddress)

# Interact with deployed contract
contract = w3.eth.contract(address=tx_receipt.contractAddress, abi=abi)

import pandas as pd

# Load ML-predicted transactions
df = pd.read_csv('transactions_with_predictions.csv')

for index, row in df.iterrows():
    tx = contract.functions.addTransaction(
        int(row['TransactionID']),
        int(row['Amount']),
        str(row['Location']),
        bool(row['Predicted_Fraud'])
    ).build_transaction({
        'chainId': chain_id,
        'from': my_address,
        'nonce': w3.eth.get_transaction_count(my_address) + index,
        'gas': 200000,
        'gasPrice': w3.to_wei(1, 'gwei')
    })
    signed_tx = w3.eth.account.sign_transaction(tx, private_key=private_key)
    w3.eth.send_raw_transaction(signed_tx.raw_transaction)

print("All transactions added to blockchain!")
